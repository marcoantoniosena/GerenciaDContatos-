#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_CONTATOS 100

struct Operadora {
    char nome[20];
};

struct TipoCelular {
    char nome[20];
};

struct Contato {
    char nome[50];
    char telefone[20];
    char email[50];
    struct Operadora operadora;
    struct TipoCelular tipoCelular;
};

struct Agenda {
    struct Contato contatos[MAX_CONTATOS];
    int numContatos;
};

void adicionarContato(struct Agenda *agenda) {
    if (agenda->numContatos >= MAX_CONTATOS) {
        printf("A agenda está cheia.\n");
        return;
    }

    struct Contato novoContato;

    printf("Nome: ");
    scanf("%s", novoContato.nome);
    printf("Telefone: ");
    scanf("%s", novoContato.telefone);
    printf("Email: ");
    scanf("%s", novoContato.email);
    printf("Operadora: ");
    scanf("%s", novoContato.operadora.nome);
    printf("Tipo de celular: ");
    scanf("%s", novoContato.tipoCelular.nome);

    FILE *arquivo;
    arquivo = fopen("contatos.txt", "a");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    fprintf(arquivo, "%s;%s;%s;%s;%s\n", novoContato.nome, novoContato.telefone, novoContato.email,
            novoContato.operadora.nome, novoContato.tipoCelular.nome);

    fclose(arquivo);

    agenda->contatos[agenda->numContatos] = novoContato;
    agenda->numContatos++;

    printf("Contato adicionado com sucesso.\n");
}

void visualizarContatos(struct Agenda *agenda) {
    FILE *arquivo;
    arquivo = fopen("contatos.txt", "r");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    printf("Contatos:\n");

    struct Contato contato;

    while (fscanf(arquivo, "%[^;];%[^;];%[^;];%[^;];%[^\n]\n",
                  contato.nome, contato.telefone, contato.email,
                  contato.operadora.nome, contato.tipoCelular.nome) != EOF) {
        printf("Nome: %s\n", contato.nome);
        printf("Telefone: %s\n", contato.telefone);
        printf("Email: %s\n", contato.email);
        printf("Operadora: %s\n", contato.operadora.nome);
        printf("Tipo de celular: %s\n", contato.tipoCelular.nome);
        printf("--------------------------\n");
    }

    fclose(arquivo);
}

void editarContato(struct Agenda *agenda) {
    if (agenda->numContatos == 0) {
        printf("Agenda vazia.\n");
        return;
    }

    char nomeBusca[50];
    printf("Digite o nome do contato que deseja editar: ");
    scanf("%s", nomeBusca);

    FILE *arquivoEntrada, *arquivoSaida;
    arquivoEntrada = fopen("contatos.txt", "r");
    arquivoSaida = fopen("temp.txt", "w");

    if (arquivoEntrada == NULL || arquivoSaida == NULL) {
        printf("Erro ao abrir os arquivos.\n");
        return;
    }

    struct Contato contato;

    while (fscanf(arquivoEntrada, "%[^;];%[^;];%[^;];%[^;];%[^\n]\n",
                  contato.nome, contato.telefone, contato.email,
                  contato.operadora.nome, contato.tipoCelular.nome) != EOF) {
        if (strcmp(contato.nome, nomeBusca) == 0) {
            printf("Digite os novos dados para o contato:\n");
            printf("Nome: ");
            scanf("%s", contato.nome);
            printf("Telefone: ");
            scanf("%s", contato.telefone);
            printf("Email: ");
            scanf("%s", contato.email);
            printf("Operadora: ");
            scanf("%s", contato.operadora.nome);
            printf("Tipo de celular: ");
            scanf("%s", contato.tipoCelular.nome);
        }

        fprintf(arquivoSaida, "%s;%s;%s;%s;%s\n", contato.nome, contato.telefone, contato.email,
                contato.operadora.nome, contato.tipoCelular.nome);
    }

    fclose(arquivoEntrada);
    fclose(arquivoSaida);

    remove("contatos.txt");
    rename("temp.txt", "contatos.txt");

    printf("Contato editado com sucesso.\n");
}

void removerContato(struct Agenda *agenda) {
    if (agenda->numContatos == 0) {
        printf("Agenda vazia.\n");
        return;
    }

    char nomeBusca[50];
    printf("Digite o nome do contato que deseja remover: ");
    scanf("%s", nomeBusca);

    FILE *arquivoEntrada, *arquivoSaida;
    arquivoEntrada = fopen("contatos.txt", "r");
    arquivoSaida = fopen("temp.txt", "w");

    if (arquivoEntrada == NULL || arquivoSaida == NULL) {
        printf("Erro ao abrir os arquivos.\n");
        return;
    }

    struct Contato contato;

    int contatoEncontrado = 0;

    while (fscanf(arquivoEntrada, "%[^;];%[^;];%[^;];%[^;];%[^\n]\n",
                  contato.nome, contato.telefone, contato.email,
                  contato.operadora.nome, contato.tipoCelular.nome) != EOF) {
        if (strcmp(contato.nome, nomeBusca) == 0) {
            contatoEncontrado = 1;
        } else {
            fprintf(arquivoSaida, "%s;%s;%s;%s;%s\n", contato.nome, contato.telefone, contato.email,
                    contato.operadora.nome, contato.tipoCelular.nome);
        }
    }

    fclose(arquivoEntrada);
    fclose(arquivoSaida);

    remove("contatos.txt");
    rename("temp.txt", "contatos.txt");

    if (contatoEncontrado) {
        printf("Contato removido com sucesso.\n");
    } else {
        printf("Contato nao encontrado.\n");
    }
}

int main() {
    struct Agenda minhaAgenda;
    minhaAgenda.numContatos = 0;
    int opcao;

    do {
        printf("\nMenu:\n");
        printf("1 - Adicionar Contato\n");
        printf("2 - Visualizar Contatos\n");
        printf("3 - Editar Contato\n");
        printf("4 - Remover Contato\n");
        printf("0 - Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                adicionarContato(&minhaAgenda);
                break;
            case 2:
                visualizarContatos(&minhaAgenda);
                break;
            case 3:
                editarContato(&minhaAgenda);
                break;
            case 4:
                removerContato(&minhaAgenda);
                break;
            case 0:
                printf("Saindo...\n");
                break;
            default:
                printf("Opcao inválida.\n");
                break;
        }
    } while (opcao != 0);

    return 0;
}
